// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2016 17:58:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MainProject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MainProject_vlg_sample_tst(
	A,
	B,
	CLOCK,
	RESET,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  CLOCK;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLOCK or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MainProject_vlg_check_tst (
	hex1,
	hex2,
	R,
	sampler_rx
);
input [1:7] hex1;
input [1:7] hex2;
input [7:0] R;
input sampler_rx;

reg [1:7] hex1_expected;
reg [1:7] hex2_expected;
reg [7:0] R_expected;

reg [1:7] hex1_prev;
reg [1:7] hex2_prev;
reg [7:0] R_prev;

reg [1:7] hex1_expected_prev;
reg [1:7] hex2_expected_prev;
reg [7:0] R_expected_prev;

reg [1:7] last_hex1_exp;
reg [1:7] last_hex2_exp;
reg [7:0] last_R_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex1_prev = hex1;
	hex2_prev = hex2;
	R_prev = R;
end

// update expected /o prevs

always @(trigger)
begin
	hex1_expected_prev = hex1_expected;
	hex2_expected_prev = hex2_expected;
	R_expected_prev = R_expected;
end



// expected hex1[1]
initial
begin
	hex1_expected[1] = 1'bX;
end 

// expected hex1[2]
initial
begin
	hex1_expected[2] = 1'bX;
end 

// expected hex1[3]
initial
begin
	hex1_expected[3] = 1'bX;
end 

// expected hex1[4]
initial
begin
	hex1_expected[4] = 1'bX;
end 

// expected hex1[5]
initial
begin
	hex1_expected[5] = 1'bX;
end 

// expected hex1[6]
initial
begin
	hex1_expected[6] = 1'bX;
end 

// expected hex1[7]
initial
begin
	hex1_expected[7] = 1'bX;
end 

// expected hex2[1]
initial
begin
	hex2_expected[1] = 1'bX;
end 

// expected hex2[2]
initial
begin
	hex2_expected[2] = 1'bX;
end 

// expected hex2[3]
initial
begin
	hex2_expected[3] = 1'bX;
end 

// expected hex2[4]
initial
begin
	hex2_expected[4] = 1'bX;
end 

// expected hex2[5]
initial
begin
	hex2_expected[5] = 1'bX;
end 

// expected hex2[6]
initial
begin
	hex2_expected[6] = 1'bX;
end 

// expected hex2[7]
initial
begin
	hex2_expected[7] = 1'bX;
end 
// expected R[ 7 ]
initial
begin
	R_expected[7] = 1'bX;
end 
// expected R[ 6 ]
initial
begin
	R_expected[6] = 1'bX;
end 
// expected R[ 5 ]
initial
begin
	R_expected[5] = 1'bX;
end 
// expected R[ 4 ]
initial
begin
	R_expected[4] = 1'bX;
end 
// expected R[ 3 ]
initial
begin
	R_expected[3] = 1'bX;
end 
// expected R[ 2 ]
initial
begin
	R_expected[2] = 1'bX;
end 
// expected R[ 1 ]
initial
begin
	R_expected[1] = 1'bX;
end 
// expected R[ 0 ]
initial
begin
	R_expected[0] = 1'bX;
end 
// generate trigger
always @(hex1_expected or hex1 or hex2_expected or hex2 or R_expected or R)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex1 = %b | expected hex2 = %b | expected R = %b | ",hex1_expected_prev,hex2_expected_prev,R_expected_prev);
	$display("| real hex1 = %b | real hex2 = %b | real R = %b | ",hex1_prev,hex2_prev,R_prev);
`endif
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( R_expected_prev[0] !== 1'bx ) && ( R_prev[0] !== R_expected_prev[0] )
		&& ((R_expected_prev[0] !== last_R_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[0] = R_expected_prev[0];
	end
	if (
		( R_expected_prev[1] !== 1'bx ) && ( R_prev[1] !== R_expected_prev[1] )
		&& ((R_expected_prev[1] !== last_R_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[1] = R_expected_prev[1];
	end
	if (
		( R_expected_prev[2] !== 1'bx ) && ( R_prev[2] !== R_expected_prev[2] )
		&& ((R_expected_prev[2] !== last_R_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[2] = R_expected_prev[2];
	end
	if (
		( R_expected_prev[3] !== 1'bx ) && ( R_prev[3] !== R_expected_prev[3] )
		&& ((R_expected_prev[3] !== last_R_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[3] = R_expected_prev[3];
	end
	if (
		( R_expected_prev[4] !== 1'bx ) && ( R_prev[4] !== R_expected_prev[4] )
		&& ((R_expected_prev[4] !== last_R_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[4] = R_expected_prev[4];
	end
	if (
		( R_expected_prev[5] !== 1'bx ) && ( R_prev[5] !== R_expected_prev[5] )
		&& ((R_expected_prev[5] !== last_R_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[5] = R_expected_prev[5];
	end
	if (
		( R_expected_prev[6] !== 1'bx ) && ( R_prev[6] !== R_expected_prev[6] )
		&& ((R_expected_prev[6] !== last_R_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[6] = R_expected_prev[6];
	end
	if (
		( R_expected_prev[7] !== 1'bx ) && ( R_prev[7] !== R_expected_prev[7] )
		&& ((R_expected_prev[7] !== last_R_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[7] = R_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#280000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module MainProject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg CLOCK;
reg RESET;
// wires                                               
wire [1:7] hex1;
wire [1:7] hex2;
wire [7:0] R;

wire sampler;                             

// assign statements (if any)                          
MainProject i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLOCK(CLOCK),
	.hex1(hex1),
	.hex2(hex2),
	.R(R),
	.RESET(RESET)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// CLOCK
initial
begin
	CLOCK = 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
	CLOCK = #10000 1'b1;
	CLOCK = #10000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
end 

MainProject_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLOCK(CLOCK),
	.RESET(RESET),
	.sampler_tx(sampler)
);

MainProject_vlg_check_tst tb_out(
	.hex1(hex1),
	.hex2(hex2),
	.R(R),
	.sampler_rx(sampler)
);
endmodule

